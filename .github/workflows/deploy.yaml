name: Deploy Django Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: bo-stage
  GKE_CLUSTER: be-demo
  GKE_ZONE: asia-south1
  DEPLOYMENT_NAME: backend-application

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Authenticate with Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Setup gcloud CLI
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      # Configure GKE credentials
      - name: Configure GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Helm Setup
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.8.0'

      # Set Environment-Specific Variables
      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi

      # Docker Login
      - name: Login to Google Container Registry
        uses: docker/login-action@v2
        with:
          registry: asia-south1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      # Build and Push Docker Image
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/bo-main/backend:${{ github.sha }}

      # Scan Docker Image
      - name: Scan Docker image
        uses: anchore/scan-action@v3
        with:
          image: "asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/bo-main/backend:${{ github.sha }}"
          fail-build: false
          severity-cutoff: critical

      # Generate TLS Certificate and Secret
      - name: Generate TLS Certificate
        run: |
          mkdir -p ssl
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout ssl/tls.key -out ssl/tls.crt \
            -subj "/CN=api-v2.integration-betteropinions.com"

      - name: Create TLS Secret
        run: |
          kubectl create secret tls gke-openssl-cert \
            --cert=ssl/tls.crt \
            --key=ssl/tls.key \
            --dry-run=client -o yaml | kubectl apply -f -

      # Validate Helm chart
      - name: Validate Helm chart
        run: |
          kubectl apply -f manifest/Chart.yaml

      # ConfigMap Setup
      - name: Create ConfigMap
        run: |
          kubectl apply -f manifest/templates/configmap.yaml

      # Deploy Django Application with Helm
      - name: Deploy Django Application
        run: |
          helm upgrade --install ${{ env.DEPLOYMENT_NAME }} ./django-app \
            --set django.image.repository=asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/bo-main/backend \
            --set django.image.tag=${{ github.sha }} \
            --set django.host=api-v2.integration-betteropinions.com \
            --set configMap.name=better-backend-app-config \
            --set global.environment=${{ env.ENVIRONMENT }} \
            --atomic

      # Verify Deployment
      - name: Check deployment status
        run: |
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} || exit 1

      # Update DNS
      - name: Update DNS
        run: |
          INGRESS_IP=$(kubectl get ingress ${{ env.DEPLOYMENT_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Updating DNS with IP: $INGRESS_IP"
          # Add your DNS update logic here
